{
  "version": 3,
  "sources": ["../../stats-gl/lib/panel.ts", "../../stats-gl/lib/main.ts"],
  "sourcesContent": ["class Panel {\n    canvas: HTMLCanvasElement;\n    context: CanvasRenderingContext2D | null;\n    name: string;\n    fg: string;\n    bg: string;\n    PR: number;\n    WIDTH: number;\n    HEIGHT: number;\n    TEXT_X: number;\n    TEXT_Y: number;\n    GRAPH_X: number;\n    GRAPH_Y: number;\n    GRAPH_WIDTH: number;\n    GRAPH_HEIGHT: number;\n\n    constructor(name: string, fg: string, bg: string) {\n\n        this.name = name;\n        this.fg = fg;\n        this.bg = bg;\n        this.PR = Math.round( window.devicePixelRatio || 1 );\n        \n        this.WIDTH = 90 * this.PR;\n        this.HEIGHT = 48 * this.PR;\n        this.TEXT_X = 3 * this.PR;\n        this.TEXT_Y = 2 * this.PR;\n        this.GRAPH_X = 3 * this.PR;\n        this.GRAPH_Y = 15 * this.PR;\n        this.GRAPH_WIDTH = 84 * this.PR;\n        this.GRAPH_HEIGHT = 30 * this.PR;\n\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = 90 * this.PR;\n        this.canvas.height = 48 * this.PR;\n        this.canvas.style.width = '90px';\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.height = '48px';\n        this.canvas.style.cssText = 'width:90px;height:48px';\n\n        this.context = this.canvas.getContext('2d');\n\n        if (this.context) {\n            this.context.font = 'bold ' + (9 * this.PR) + 'px Helvetica,Arial,sans-serif';\n            this.context.textBaseline = 'top';\n\n            this.context.fillStyle = this.bg;\n            this.context.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n\n            this.context.fillStyle = this.fg;\n            this.context.fillText(this.name, this.TEXT_X, this.TEXT_Y);\n            this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n\n            this.context.fillStyle = this.bg;\n            this.context.globalAlpha = 0.9;\n            this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n        }\n\n    }\n\n    update(value: number, valueGraph: number, maxValue: number, maxGraph: number, decimals = 0) {\n        let min = Infinity, max = 0;\n\n        if (!this.context) return;\n\n        min = Math.min(min, value);\n        max = Math.max(maxValue, value);\n        maxGraph = Math.max(maxGraph, valueGraph);\n\n        this.context.fillStyle = this.bg;\n        this.context.globalAlpha = 1;\n        this.context.fillRect(0, 0, this.WIDTH, this.GRAPH_Y);\n        this.context.fillStyle = this.fg;\n        this.context.fillText(value.toFixed(decimals) + ' ' + this.name + ' (' + min.toFixed(decimals) + '-' + parseFloat(max.toFixed(decimals)) + ')', this.TEXT_X, this.TEXT_Y);\n\n        this.context.drawImage(this.canvas, this.GRAPH_X + this.PR, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT, this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT);\n\n        this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, this.GRAPH_HEIGHT);\n\n        this.context.fillStyle = this.bg;\n        this.context.globalAlpha = 0.9;\n\n        this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, ((1 - (valueGraph / maxGraph))) * this.GRAPH_HEIGHT);\n    }\n};\n\nexport default Panel;", "import Panel from \"./panel\";\nimport * as THREE from 'three';\nexport interface AverageArray {\n  logs: number[];\n  graph: number[];\n}\n\n\nclass Stats {\n  totalCpuDuration: number = 0;\n  totalGpuDuration: number = 0;\n  totalGpuDurationCompute: number = 0;\n  totalFps: number = 0;\n  mode: number;\n  info: any;\n  dom: HTMLDivElement;\n  minimal: boolean;\n  horizontal: boolean;\n  beginTime: number;\n  prevTime: number;\n  prevCpuTime: number;\n  frames: number;\n  averageCpu: AverageArray;\n  averageGpu: AverageArray;\n  averageGpuCompute: AverageArray;\n  queryCreated: boolean;\n  isRunningCPUProfiling: boolean;\n  fpsPanel: Panel;\n  static Panel: typeof Panel = Panel;\n  msPanel: Panel;\n  gpuPanel: Panel | null;\n  gpuPanelCompute: Panel | null;\n  samplesLog: number;\n  samplesGraph: number;\n  logsPerSecond: number;\n  activeQuery: WebGLQuery | null = null;\n\n  precision: number;\n  gl: WebGL2RenderingContext | null;\n  ext: any;\n  query: WebGLQuery | null;\n  disjoint: any;\n  ns: any;\n  threeRendererPatched: boolean;\n  gpuQueries: { query: WebGLQuery }[] = [];\n  renderCount: number = 0;\n\n  constructor({ logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {}) {\n\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.dom = document.createElement('div');\n    this.dom.style.cssText = 'position:fixed;top:0;left:0;opacity:0.9;z-index:10000;';\n\n    if (minimal) {\n\n      this.dom.style.cssText += 'cursor:pointer';\n\n    }\n\n    this.gl = null;\n    this.query = null;\n\n    this.isRunningCPUProfiling = false;\n    this.minimal = minimal;\n\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.renderCount = 0;\n    this.threeRendererPatched = false;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpuCompute = {\n      logs: [],\n      graph: []\n    };\n\n    this.queryCreated = false;\n\n    this.fpsPanel = this.addPanel(new Stats.Panel('FPS', '#0ff', '#002'), 0);\n    this.msPanel = this.addPanel(new Stats.Panel('CPU', '#0f0', '#020'), 1);\n    this.gpuPanel = null;\n    this.gpuPanelCompute = null;\n\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n\n    if (this.minimal) {\n\n      this.dom.addEventListener('click', (event) => {\n\n        event.preventDefault();\n        this.showPanel(++this.mode % this.dom.children.length);\n\n      }, false);\n\n      this.mode = mode;\n      this.showPanel(this.mode);\n\n    } else {\n\n      window.addEventListener('resize', () => {\n\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n        if (this.gpuPanelCompute) {\n          this.resizePanel(this.gpuPanelCompute, 3);\n        }\n      })\n    }\n\n\n  }\n\n  patchThreeRenderer(renderer: any) {\n\n    // Store the original render method\n    const originalRenderMethod = renderer.render;\n\n    // Reference to the stats instance\n    const statsInstance = this;\n\n    // Override the render method on the prototype\n    renderer.render = function (scene: THREE.Scene, camera: THREE.Camera) {\n\n\n      statsInstance.begin(); // Start tracking for this render call\n\n      // Call the original render method\n      originalRenderMethod.call(this, scene, camera);\n\n      statsInstance.end(); // End tracking for this render call\n    };\n\n\n    this.threeRendererPatched = true;\n\n  }\n\n  resizePanel(panel: Panel, offset: number) {\n\n    panel.canvas.style.position = 'absolute';\n\n    if (this.minimal) {\n\n      panel.canvas.style.display = 'none';\n\n    } else {\n\n      panel.canvas.style.display = 'block';\n      if (this.horizontal) {\n        panel.canvas.style.top = '0px';\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + 'px';\n      } else {\n        panel.canvas.style.left = '0px';\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + 'px';\n\n      }\n    }\n  }\n\n  addPanel(panel: Panel, offset: number) {\n\n    if (panel.canvas) {\n\n      this.dom.appendChild(panel.canvas);\n\n      this.resizePanel(panel, offset);\n\n    }\n\n    return panel;\n\n  }\n\n  showPanel(id: number) {\n\n    for (let i = 0; i < this.dom.children.length; i++) {\n      const child = this.dom.children[i] as HTMLElement;\n\n      child.style.display = i === id ? 'block' : 'none';\n\n    }\n\n    this.mode = id;\n\n  }\n\n  async init(canvasOrGL: any) {\n    if (!canvasOrGL) {\n      console.error('Stats: The \"canvas\" parameter is undefined.');\n      return;\n    }\n\n\n    // if ((canvasOrGL as any).isWebGPURenderer && !this.threeRendererPatched) {\n    // TODO Color GPU Analytic in another color than yellow to know webgpu or webgl context (blue)\n    //   const canvas: any = canvasOrGL\n    //   this.patchThreeRenderer(canvas as any);\n    //   this.gl = canvas.getContext();\n    // } else \n    if ((canvasOrGL as any).isWebGLRenderer && !this.threeRendererPatched) {\n      const canvas: any = canvasOrGL\n      this.patchThreeRenderer(canvas as any);\n      this.gl = canvas.getContext();\n    } else if (!this.gl && canvasOrGL instanceof WebGL2RenderingContext) {\n      this.gl = canvasOrGL;\n    }\n\n    if (canvasOrGL.isWebGPURenderer) {\n\n      canvasOrGL.backend.trackTimestamp = true\n\n      if (await canvasOrGL.hasFeatureAsync('timestamp-query')) {\n        this.gpuPanel = this.addPanel(new Stats.Panel('GPU', '#ff0', '#220'), 2);\n        this.gpuPanelCompute = this.addPanel(new Stats.Panel('CPT', '#e1e1e1', '#212121'), 3);\n        this.info = canvasOrGL.info\n      }\n      return;\n    }\n    // Check if canvasOrGL is already a WebGL2RenderingContext\n\n\n    // Handle HTMLCanvasElement and OffscreenCanvas\n    else if (!this.gl && canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\n      this.gl = canvasOrGL.getContext('webgl2') as WebGL2RenderingContext;\n      if (!this.gl) {\n        console.error('Stats: Unable to obtain WebGL2 context.');\n        return;\n      }\n    } else if (!this.gl) {\n      console.error('Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.');\n      return;\n    }\n\n    // Get the extension\n    this.ext = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new Stats.Panel('GPU', '#ff0', '#220'), 2);\n    }\n  }\n\n\n  begin() {\n\n    if (!this.isRunningCPUProfiling) {\n      this.beginProfiling('cpu-started');\n    }\n\n    if (!this.gl || !this.ext) return;\n\n    if (this.gl && this.ext) {\n      if (this.activeQuery) {\n        // End the previous query if it's still active\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      }\n\n      this.activeQuery = this.gl.createQuery();\n      if (this.activeQuery !== null) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.activeQuery);\n      }\n    }\n  }\n\n\n\n  end() {\n\n    // Increase render count\n    this.renderCount++;\n\n    if (this.gl && this.ext && this.activeQuery) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      // Add the active query to the gpuQueries array and reset it\n      this.gpuQueries.push({ query: this.activeQuery });\n      this.activeQuery = null;\n    }\n\n  }\n\n  processGpuQueries() {\n\n\n    if (!this.gl || !this.ext) return;\n\n    this.totalGpuDuration = 0;\n\n    this.gpuQueries.forEach((queryInfo, index) => {\n      if (this.gl) {\n        const available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);\n        const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n\n        if (available && !disjoint) {\n          const elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);\n          const duration = elapsed * 1e-6;  // Convert nanoseconds to milliseconds\n          this.totalGpuDuration += duration;\n          this.gl.deleteQuery(queryInfo.query);\n          this.gpuQueries.splice(index, 1);  // Remove the processed query\n        }\n      }\n    });\n\n  }\n\n  update() {\n\n    if (this.info === undefined) {\n      this.processGpuQueries();\n    } else {\n\n      this.totalGpuDuration = this.info.render.timestamp\n      this.totalGpuDurationCompute = this.info.compute.timestamp\n      this.addToAverage(this.totalGpuDurationCompute, this.averageGpuCompute);\n\n    }\n\n    this.endProfiling('cpu-started', 'cpu-finished', 'cpu-duration');\n\n    // Calculate the total duration of CPU and GPU work for this frame\n    this.addToAverage(this.totalCpuDuration, this.averageCpu);\n    this.addToAverage(this.totalGpuDuration, this.averageGpu);\n\n    this.renderCount = 0;\n\n    // If this.totalCpuDuration is 0, it means that the CPU query was not created and stats.begin() never called/overrided\n    if (this.totalCpuDuration === 0) {\n      this.beginProfiling('cpu-started');\n    }\n\n    this.totalCpuDuration = 0;\n\n    this.totalFps = 0;\n\n    this.beginTime = this.endInternal()\n\n  }\n\n  endInternal() {\n\n    this.frames++;\n    const time = (performance || Date).now();\n\n    if (time >= this.prevCpuTime + 1000 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n\n      if (this.gpuPanelCompute) {\n        this.updatePanel(this.gpuPanelCompute, this.averageGpuCompute);\n      }\n\n      this.prevCpuTime = time;\n    }\n\n    if (time >= this.prevTime + 1000) {\n\n      const fps = (this.frames * 1000) / (time - this.prevTime);\n\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n\n      this.prevTime = time;\n      this.frames = 0;\n\n    }\n\n    return time;\n\n  }\n\n  addToAverage(value: number, averageArray: { logs: any; graph: any; }) {\n\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n\n      averageArray.logs.shift();\n\n    }\n\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n\n      averageArray.graph.shift();\n\n    }\n\n  }\n\n  beginProfiling(marker: string) {\n\n    if (window.performance) {\n\n      window.performance.mark(marker);\n      this.isRunningCPUProfiling = true\n\n    }\n\n  }\n\n  endProfiling(startMarker: string | PerformanceMeasureOptions | undefined, endMarker: string | undefined, measureName: string) {\n\n    if (window.performance && endMarker && this.isRunningCPUProfiling) {\n\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.totalCpuDuration += cpuMeasure.duration;\n      this.isRunningCPUProfiling = false\n\n    }\n\n  }\n\n  updatePanel(panel: { update: any; } | null, averageArray: { logs: number[], graph: number[] }) {\n\n    if (averageArray.logs.length > 0) {\n\n      let sumLog = 0;\n      let max = 0.01;\n\n      for (let i = 0; i < averageArray.logs.length; i++) {\n\n        sumLog += averageArray.logs[i];\n\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n\n      }\n\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n\n        sumGraph += averageArray.graph[i];\n\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n\n      }\n\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n\n    }\n  }\n\n  get domElement() {\n    // patch for some use case in threejs\n    return this.dom;\n\n  }\n\n  get container() { // @deprecated\n\n    console.warn('Stats: Deprecated! this.container as been replaced to this.dom ')\n    return this.dom;\n\n  }\n\n}\n\n\nexport default Stats;"],
  "mappings": "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",
  "names": ["_Stats"]
}
